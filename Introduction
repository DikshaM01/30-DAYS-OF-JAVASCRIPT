->console.log(1) ->it will output as 1 , it will simply displays information in any javascript console
->variables are containers that store the information for later use
->let test; //where let is the variable keyword which is used to declaring the variable
->let test; console.log(test); -> it will output undefined because the test variable is only declared not 
initialized. we can assign the variable using assignement operator
->let test;
  test=1;
  console.log(test)
it will give output as 1.
->we can also create a variable using const keyword for example const test=5;
-> the difference between let and const is that you cannot assign a new value to const.
->if you are using const you must initialize it also. you cant just declare it.
->const num;
num=5;
console.log(num) ->it will give error as uncaught syntax error :missing initializer in const declaration
->const value will never get changed-> for example -> const pi=3.14159;
->we can also declare it with using 'var' keyword 
-> in javascript the number can be flating type or number also
->when any variable is not defined then and if they are asked in the output then it will give undefined output
-> const variable;
  console.log(variable)->undefined
-> const emptyvariable=null;
  console.log(emptyvaribale);->null
->The main differences between var and let in JavaScript relate to their scope and hoisting behavior:
Scope:

    var: Variables declared with var are function-scoped or globally-scoped. They are hoisted to the top of their function scope and can be accessed anywhere within that function, regardless of where they are declared. If declared outside any function, they become globally scoped.

    let: Variables declared with let are block-scoped. They are only accessible within the block (enclosed by curly braces {}) where they are declared. let variables are not hoisted to the top of the block, and they exhibit what's called the "temporal dead zone," meaning you can't access them before they are declared within the block.

Hoisting:

    var: Variables declared with var are hoisted to the top of their function scope. This means that even if you declare a var variable at the bottom of a function, JavaScript will hoist it to the top during the compilation phase, making it accessible throughout the function.

    let: Unlike var, variables declared with let are hoisted to the top of their block scope but not initialized. Accessing a let variable before its declaration results in a ReferenceError due to the temporal dead zone. This means that the variable exists, but you can't access it until it's declared in the code.


->The first character must be a letter, an underscore (_), or a dollar sign ($). Subsequent characters may be any letter or digit or an underscore or dollar sign. 



var                                                  	let	                                                const
The scope of a var variable is functional scope.	The scope of a let variable is block scope.	               The scope of a const variable is block scope.
It can be updated and re-declared into the scope.	It can be updated but cannot be re-declared into the scope.	It cannot be updated or re-declared into the scope.
It can be declared without initialization.	      It can be declared without initialization.	                It cannot be declared without initialization.
It can be accessed without initialization as its default value is “undefined”.	It cannot be accessed before declaration otherwise it will give ‘referenceError’.	It cannot be accessed without initialization, as it cannot be declared without initialization.
Hoisting is done , with initializing as ‘default’ value	Hoisting is done , but not initialized (this is the reason for error when we access the let variable before declaration/initialization).	Hoisting is done, but not initialized (this is the reason for error when we access the const variable before declaration/initialization).
