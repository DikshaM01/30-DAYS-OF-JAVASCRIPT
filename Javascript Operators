-> == is equal to comparison operator for example 2==2
-> const priceone=10;
   const pricetwo=10;
   console.log(priceone==pricetwo)
it will output true.
-> != not equal to
-> > greater than and >= greater than equal to
-> < less than and <= less than equal to
-> + addition and concatenation(for strings)
-> when combining two different data types . the default primitive value is a string, so when you try to
  add a number to a string , javascript will take number as a string
for example console.log(1+"1");->11
-> - subtraction,* multiplication , / division , % modulous operator 
-> /=,*=,-=,+=,%=
-> Math.abs =positve value
  Math.exp= calculates e to the power of number
  Math.pow(x,y) =calculate the result of x to the power of y
  Math.floor =remove the fraction part of a number
  Math.random() will give random number
-> Template literals dont use single quote or double quote to specify strings. it uses `backtick character`
->-4 ** 2 // This is an incorrect expression
-(4 ** 2) gives -16, this is a correct expression
-> Unary (-) This is a unary operator i.e. it operates on a single operand. It gives the negation of an operand.
Syntax:
-a
let obj1={'val1':'value'}
let obj2={'val2':'value'}
console.log(obj1.val1=='value');//true
console.log(obj1==obj2);//false
console.log(obj1.val1==obj2.val2);//true

console.log(0==undefined)//false
console.log(null==undefined)//true

Strict equality (===): 

This operator is used to compare the equality of two operands with type. If both value and type are equal then the condition is true otherwise false.
let val1 =5;
let val2='5';
console.log(val1===val2)//true
console.log(val1===6)//false


Strict Inequality !==
